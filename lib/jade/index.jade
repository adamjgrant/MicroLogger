extends layout

block content
  h1 Test runner proof of concept

  p The button on the left will expect you to press the button on the right in three seconds.
  p Open your console to see test runner output.
  button#first Press me first
  &nbsp;
  button#second Press me second

  h2 What happened?

  p On the event listener for <strong>Button 1</strong> we registered a simple assertion

  pre testRunner.waitForButton = new testRunner.Assert("button was pressed in less than 3 seconds", 3000);

  p On the event listener for <strong>Button 2</strong> we simply made a call to the function we created from button 1.

  pre testRunner.waitForButton.return()

  p <code>waitForButton</code> is a custom name, you can create any name you want after <code>testRunner</code>

  h1 Specs

  p We can also bundle tests into specs. Let's use the same example but we want to see that the second button is pressed both less than 3 and less than 5 seconds.

  button#third Press me first
  &nbsp;
  button#fourth Then press me

  h2 What happened?

  p When we pressed the first button, the event listener created a new spec with two assertions.

  :markdown
    <span>

        testRunner.specs.waitTwiceForButton = new testRunner.Spec([
          testRunner.waitForButton = new testRunner.Assert("button was pressed in less than 3 seconds", 3000),
          testRunner.waitForButton = new testRunner.Assert("button was pressed in less than 5 seconds", 5000)
        ]);

  p On the second button, again, we just call <code>return</code> on the function we created in button 1's event listener.

  :markdown
    <span>

        testRunner.specs.waitTwiceForButton.return();

  h1 Expect

  p How about conditional logic? Let's use <code>Expect</code> to compare two numbers.

  p This button will check if the variable is equal to 1.

  button#getone Check for 1

  p Now these two buttons will set a variable equal to 1 or 2 respectively. And run the test.

  button#setone 1
  &nbsp;
  button#settwo 2

  h2 What happened?

  p First, our get one button set up an expectation

  :markdown
    <span>

        testRunner.getOne = new testRunner.Expect("variable is set to 1", function(variable) {
          return variable === 1; // We'll use plain old JavaScript to return true or false.
        });

  p Next, each of our buttons set the return value. We could have also done this in reverse order and called return on the button that did the expectation.

  :markdown
    <span>

      // Button 1's event listener
      var someVar = 1;
      testRunner.getOne.return(someVar);

      // Button 2's event listener
      var someVar = 2;
      testRunner.getOne.return(someVar);

  h1 Adding it all together

  p Now let's use both assertions and expectations in a spec.

  p We expect that a variable is set to 1 in less than 3 seconds

  button#final First, let's begin the timer

  p Now, one of these will need to be pressed in less than 3 seconds and sets the var equal to 1.

  button#setonetwo Set 1
  button#settwotwo Set 2

  h2 What happened?

  p In the first button's event listener, we created a spec.

  :markdown
    <span>

        testRunner.specs.getOneQuickly = new testRunner.Spec([
          new testRunner.Expect("variable is set to 1", function(variable) {
            return variable === 1;
          }),
          new testRunner.Assert("variable is set in less than 3 seconds", 3000);
        ]);

  p Now each button just needs to return the variable to the spec function we created.

  :markdown
    <span>

        // Button 1's event listener
        someVar = 1
        testRunner.specs.getOneQuickly.return(someVar);

        // Button 2's event listener
        someVar = 2
        testRunner.specs.getOneQuickly.return(someVar);
