var $tr={specs:{},Assert:function(t,s,i){this.string=t,this.timeout=s,this.spec=i,this.fail=window.setTimeout(function(){testRunner.fail(this.string)}.bind(this),this.timeout)},Expect:function(t,s){this.string=t,this.condition=s},Spec:function(t){this.tests=new Array,this.tests=this.tests.concat(t)},pass:function(t){console.log("%cTESTRUNNER PASSED: "+t,"color: green")},fail:function(t,s){console.error("TESTRUNNER FAILED: "+t),console.error(s)}};$tr.Assert.prototype["return"]=function(){window.clearTimeout(this.fail),$tr.pass(this.string)},$tr.Expect.prototype["return"]=function(){var t=Array.prototype.slice.call(arguments);this.condition.apply(null,t)?$tr.pass(this.string):$tr.fail(this.string,t)},$tr.Spec.prototype["return"]=function(){thisData=Array.prototype.slice.call(arguments);for(var t=0,s=this.tests.length;s>t;t++)this.tests[t]["return"](thisData[t])},module.exports=$tr;