var testRunner={specs:{},Assert:function(t,s,e){this.string=t,this.timeout=s,this.spec=e,this.fail=window.setTimeout(function(){console.error("TESTRUNNER FAIL"+(this.spec||"")+": "+this.string)}.bind(this),this.timeout)},Expect:function(t,s){this.string=t,this.condition=s},Spec:function(t){this.tests=new Array,this.tests=this.tests.concat(t)}};testRunner.Assert.prototype["return"]=function(){window.clearTimeout(this.fail),console.log("%c TESTRUNNER PASSED: "+this.string,"color: green")},testRunner.Expect.prototype["return"]=function(){var t=Array.prototype.slice.call(arguments);this.condition.apply(null,t)?console.log("%c TESTRUNNER PASSED: "+this.string,"color: green"):(console.error("TESTRUNNER FAILED: "+this.string),console.error(t))},testRunner.Spec.prototype["return"]=function(){thisData=Array.prototype.slice.call(arguments);for(var t=0,s=this.tests.length;s>t;t++)this.tests[t]["return"](thisData[t])},module.exports=testRunner;