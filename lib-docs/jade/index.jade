extends 3.x-layouts/_layout

block page-stylesheet
  link(rel="stylesheet" href="/css/pages/index.min.css")

block hero
  header.index-hero
    <svg class="svg-logo"><use xlink:href="#svg-logo"></use></svg>
    <svg class="svg-logo-k"><use xlink:href="#svg-logo-k"></use></svg>
    h2 The CSS Library that Loves to Be Extended
    <iframe class="github-stars" src="http://ghbtns.com/github-btn.html?user=adamjgrant&repo=kickstart&type=watch&count=true&size=large" allowtransparency="true" frameborder="0" scrolling="0" width="170" height="30"></iframe>
    <iframe class="github-stars mobile" src="http://ghbtns.com/github-btn.html?user=adamjgrant&repo=kickstart&type=watch&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="110" height="20"></iframe>
    a(href="https://gratipay.com/yourwebsitesUX/")
      img(class="tips" src="//img.shields.io/gratipay/yourwebsitesUX.svg")

block content
  article.home-wrapper
    section.preview
      img(src="http://cdn.everything.io/kickstart/3.x/img/preview.png")

    .faster-and-lighter-than-bootstrap
      h1 Faster and lighter than Bootstrap

      .css
        h2 CSS
        .graph.graph-css
          .kickstart
          .bootstrap
          .foundation
        p Kickstart's CSS is only 80kb and even smaller when you roll your own from the Sass mixins.

      .js
        h2 JavaScript
        .graph.graph-js
          .kickstart
          .group
            .jquery
            .bootstrap

          .group
            .jquery
            .foundation

        p Not only is the Kickstart JS smaller than Bootstrap and Foundation, it also doesn't require jQuery--drastically reducing page load times.

  section.blue.step-by-step
    article.home-wrapper
      h1 How it works
      p
        | Kickstart has been used in production websites for over three years. Kickstart is a library, not a framework.
        | This means you only use the CSS you need instead of slowing down your site with a complete UI library.

      div(data-component="step")
        h2 First, let's make a navigation bar for our website.
        .code

          h3 HTML
          .highlight
            :markdown
              <span>

                  <header class="main-nav">
                    <nav>
                      <ul>
                        <li> <a href="/">Home</a> </li>
                      </ul>

                      <ul>
                        <li> <a href="/products">Products</a> </li>
                        <li> <a href="/blog">Blog</a> </li>
                      </ul>
                    </nav>
                  </header>

          :markdown
            <span>

                <h1>Welcome</h1>

          h3 SCSS
          .highlight
            :markdown
              <span>

                  .main-nav {
                    @include navbar();
                  }

        .rendering
          img(src="img/steps/1.png")

      div(data-component="step")
        h2 Great. But it would look better darker.
        .code

          h3 SCSS
          .highlight
            :markdown
              <span>

                  .main-nav {
                    @include navbar($background-color: #333);
                  }

        .rendering
          img(src="img/steps/2.png")


      div(data-component="step")

        h2 Now let's create a sidebar for news.
        .code
          h3 HTML
          :markdown
            <span>

                <body>
                  <header class="main-nav">...</header>

          .highlight
            :markdown
              <span>

                    <main class="content">
                      <aside class="content-news">
                        <h1>News</h1>
                        <button id="all-news">All News</button>
                      </aside>

                      <main class="content-articles">
                        <h1>Welcome</h1>
                      </main>
                    </main>

          :markdown
            <span>

                ...

          h3 SCSS
          :markdown
            <span>

                .main-nav         { @include navbar(); }

          .highlight
            :markdown
              <span>

                  .content          { @include row(); }
                  .content-news     { @include column('third'); }
                  .content-articles { @include column('twothirds'); }

        .rendering
          img(src="img/steps/3.png")

      div(data-component="step")
        h2 Let's add a picture. But I don't think I want it to show on small devices
        .code
          h3 HTML
          :markdown
            <span>

                <body>
                  <header class="main-nav">...</header>

                  <h1 class="title">Welcome</h1>

                  <main class="content">
                    <aside class="content-news">
                      <h1>News</h1>
                      <button id="all-news">All News</button>
                    </aside>

          .highlight
            :markdown
              <span>

                      <main class="content-articles">
                        <h1>Welcome</h1>
                        <img class="hero-img" src="mountains.jpg" />
                      </main>

          :markdown
            <span>

                ...

          h3 SCSS
          .highlight
            :markdown
              <span>

                  .hero-img {
                    display: none;

                    @include gt($tablet) {
                      display: block;
                    }
                  }

        .rendering
          img(src="img/steps/4.png")
          img(src="img/steps/5.png")

      div(data-component="step")
        h2 This page could use a wrapper to create margins on either side.
        .code
          h3 HTML
          :markdown
            <span>

                <body>
                  <header class="main-nav">...</header>

          .highlight
            :markdown
              <span>

                    <div class="wrapper">
                      <main class="content">
                        ...
                      </main>
                    </div>

                  ...

          h3 SCSS
          .highlight
            :markdown
              <span>

                  .wrapper {
                    @include wrapper();
                  }

        .rendering
          img(src="img/steps/6.png")

      div(data-component="step")
        h2 Let's have that button open a modal
        h3 HTML
        .code
          :markdown
            <span>

                <body>
                  <header class="main-nav">...</header>
                  <div class="wrapper">
                    <main class="content">

          .highlight
            :markdown
              <span>

                        <aside class="content-news">
                          <h1>News</h1>
                          <button id="all-news">All News</button>
                        </aside>

          :markdown
            <span>

                ...

          .highlight
            :markdown
              <span>

                    <!-- This will be our modal -->
                    <div class="all-news-modal">
                      <header>
                        <h1>All News</h1>
                      </header>
                      <main>...</main>
                      <footer>...</footer>
                    </div>

          :markdown
            <span>

                ...

          h3 SCSS
          .highlight
            :markdown
              <span>

                  .all-news-modal {
                    @include modal();
                  }

          h3 JavaScript
          .highlight
            :markdown
              <span>

                  // No jQuery required, but use it if you want.
                  $('#all-news').click(function() {
                    $('.all-news-modal').show();
                  });

        .rendering
          img(src="img/steps/8.png")

      div(data-component="step")
        h2 It would be great to make that "News" title smaller
        .code
          h3 HTML
          :markdown
            <span>

                <body>
                  <header class="main-nav">...</header>

                  <div class="wrapper">
                    <main class="content">

          .highlight
            :markdown
              <span>

                        <aside class="content-news">
                          <h1>News</h1>
                          <button id="all-news">All News</button>
                        </aside>

          :markdown
            <span>

                ...

          h3 SCSS
          .highlight
            :markdown
              <span>

                  .content-news h1 { @include heading_sm;}

        .rendering
          img(src="img/steps/11.png")


      div(data-component="step")
        h2 If we're using the optional Gulp framework, we can also stream our code to a browser and a remote URL.

        .code
          h3 Terminal
          .highlight
            :markdown
              <span>

                  $ gulp watch
                  ...
                  [BS] Local URL: http://localhost:3001
                  [BS] External URL: http://10.0.1.7:3001
                  [BS] Serving files from: lib

        .rendering
          img(src="img/steps/9.png")
          p
            em
              | Notice how we've created two servers here. The external server allows
              | us to test the page as a public website. This is great for live mobile testing.

      div(data-component="step")
        h2 We can also keep our JS modular.

        .code
          h3 CoffeeScript
          .highlight
            :markdown
              <span>

                  KS             = require '../../lib-core/coffee/app'
                  $              = require './jquery'
                  datepicker     = require './pikaday'
                  moment         = require './moment'

        .rendering
          img(src="img/steps/10.png")

      div(data-component="step")
        h2 And write mocha/phantom JS tests on the fly.

        .code
          h3 CoffeeScript
          .highlight
            :markdown
              <span>

                  assert = require("chai").assert
                  expect = require("chai").expect

                  describe 'Kickstart', ->
                    it 'is present', ->
                      expect(k$).to.not.equal(undefined)

        .rendering
          .code-preview
            p √ Kickstart is present
            p 1 passing (9ms)

      div(data-component="step")
        h2 Kickstart has a lot of components, but it's also extendible. So we can add third party UIs from the community in the Kickstart Store.

        .code
          h3 Terminal
          .highlight
            :markdown
              <span>

                  $ git submodule add git://github.com/adamjgrant/switch.git

          h3 SCSS vendor/_index.sass
          .highlight
            :markdown
              <span>

                  @import switch/switch

          h3 SCSS any of your project's SCSS files.
          .highlight
            :markdown
              <span>

                  .switch { @include switch(); }

        .rendering
          img(src="img/steps/12.png")

  section.blue.optimized-for-developer-happiness
    article.home-wrapper
      section.checklist
        h1 Optimized for developer happiness
        table
          thead
            tr
              th &nbsp;
              th Kickstart
              th Bootstrap
              th Foundation
              th Bourbon
          tbody
            tr
              td Open source
              td
                span.fa.fa-check
              td
                span.fa.fa-check
              td
                span.fa.fa-check
              td
                span.fa.fa-check
            tr
              td Used today in production environments
              td
                span.fa.fa-check
              td
                span.fa.fa-check
              td
                span.fa.fa-check
              td
                span.fa.fa-check
            tr
              td Native support for Rails
              td
                span.fa.fa-check
              td
                span.fa.fa-check
              td
                span.fa.fa-check
              td
                span.fa.fa-check
            tr
              td Native support for Gulp
              td
                span.fa.fa-check
              td &nbsp;
              td &nbsp;
              td &nbsp;
            tr
              td Native support for 3rd party components
              td
                span.fa.fa-check
              td &nbsp;
              td &nbsp;
              td &nbsp;
            tr
              td Official Component/Theme store
              td
                span.fa.fa-check
              td &nbsp;
              td &nbsp;
              td &nbsp;
            tr
              td Native support for 3rd party themes
              td
                span.fa.fa-check
              td &nbsp;
              td &nbsp;
              td &nbsp;
            tr
              td Optional simple CDN-hosted CSS/JS usage
              td
                span.fa.fa-check
              td
                span.fa.fa-check
              td
                span.fa.fa-check
              td &nbsp;
            tr
              td Optional single-mixin components
              td
                span.fa.fa-check
              td &nbsp;
              td &nbsp;
              td &nbsp;
            tr
              td jQuery Optional JavaScript
              td
                span.fa.fa-check
              td &nbsp;
              td &nbsp;
              td &nbsp;
            tr
              td Flexbox Grid
              td
                span.fa.fa-check
              td &nbsp;
              td &nbsp;
              td &nbsp;

  article.home-wrapper
    section.static-or-with-mixins
      .title
        h1 Use statically or with mixins
        p Look how easy it is to create this Navbar. Most components in Kickstart require only one mixin to bring markup to life.
        p For users preferring a static CSS file, simple CSS classes are available to quickly write up components.
        p
          span.notice Did you know?
          |  The Kickstart documentation can be toggled between static- and mixin-usage.

      .example

        .navbar
          nav
            ul
              li: a(href="#") Home
              li: a(href="#") Blog
            ul
              li: a.button(href="#" role="button") Login

        ul.tabs(data-ks-tabs="true")
          li.open: a(href="#static") Static
          li: a(href="#mixins") With Mixins

        .examples
          article#static
            :markdown
              <span>

                  <!-- Just use a CSS class -->
                  <div class="navbar">
                    <nav>
                      <ul>
                        <li>
                          <a href="#">Home</a>
                        </li>
                        <li>
                          <a href="#">Blog</a>
                        </li>
                      </ul>
                      <ul>
                        <li>
                          <a class="button button-primary" role="button" href="#">Login</a>
                        </li>
                      </ul>
                    </nav>
                  </div>

          article#mixins
            :markdown
              <span>

                  // Just one mixin does the trick!
                  // Use whatever CSS class you want.
                  .info-bar { @include navbar(); }
                  .button { @include button($primary-color); }

                  <div class="info-bar">
                    <nav>
                      <ul>
                        <li>
                          <a href="#">Home</a>
                        </li>
                        <li>
                          <a href="#">Blog</a>
                        </li>
                      </ul>
                      <ul>
                        <li>
                          <a class="button" role="button" href="#">Login</a>
                        </li>
                      </ul>
                    </nav>
                  </div>


  section.blue
    article.home-wrapper
      section.loves-to-be-extended
        .ui
          img(src="http://cdn.everything.io/kickstart/3.x/img/ui.png")

        h1 Loves to be extended
        p
          | The library is just the core. Kickstart is designed to be extended and themed via the&nbsp;
          a(href="http://kickstart.everything.io") Kickstart Store
          | .

  article.home-wrapper
    section.use-in-any-project
      h1 Use in any project
      .logos
        img(src="img/rubyonrails.png")
        img(src="img/nodejs.png")
        img(src="img/html5css3.jpg")
        img(src="img/jekyll.png")
      :markdown
        The Kickstart library is available for basic HTML as well as official [Gulp](/docs/#{docsVersion}/#nodejs) and [Rails](/docs/#{docsVersion}/#rails) integrations.

  article.home-wrapper
    section.follow-everything-for-updates
      h1 Follow Everything for Updates
      <a class="twitter-timeline" href="https://twitter.com/everythingdotio" data-widget-id="535480681191964675">Tweets from @everythingdotio</a> <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+"://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>

  article.home-wrapper
    footer.specs
      h1 Specifications

      .spec
        dl
          dt Browser Support
          dd Officially, Kickstart is a library for <a href="http://eisenbergeffect.bluespire.com/evergreen-browsers/">Evergreen Browsers</a>. But I make an effort to support IE 10+, IE9 with shim, Chrome 35, Firefox 30+, Safari 8+

      .spec
        dl
          dt License
          dd
            a(href="http://opensource.org/licenses/MIT") MIT

      .spec
        dl
          dt Source Files
          dd Sass, Jade, CoffeeScript
