extends ../_layout

block hero-title
  h1 Layout and CSS

block variables
  - var showFooter = false 
  - var title = 'Layout and CSS' 

block subMenuVars
  - var subMenuItem = "getstarted"

block documents
  .document
    article.article.article-full
      :markdown
        # Layout styles

        Before you start adding components to your page, it's best to decide if
        you want a fixed, fluid, or fixed-fluid layout.

        ## Fixed layout

        A fixed layout simply limits the width of the layout to a certain amount.

      iframe.animation(scrolling="no" src="/iframes/layout-fixed/fixed.html")

  .document
    article.article
      .if-semantic
        :markdown
          For a fixed wrapper, create a fluid wrapper around your content with `$fluid; true`.
            Now you just need to limit that fluidity with a max-width property.

      .ifnot-semantic
        :markdown
          For a fixed wrapper, use the `.wrapper.wrapper-fixed` classes.
      :markdown
        The default max-width is about 768px, however, you can define your own by adding
        a `max-width` property.

    article.code
      .if-semantic
        :markdown
          <span>

              <div class="wrapper">
                <h1>Hello world</h1>
              </div>

              .wrapper{
                @include wrapper($fluid: true);
                max-width: 700px;
              }

      .ifnot-semantic
        :markdown
          <span>

              <div class="wrapper wrapper-fixed">
                <h1>Hello world</h1>
              </div>

              .wrapper.wrapper-fixed {
                max-width: 700px; // if 768px is not sufficient
              }

  .document
    article.article
      :markdown
        ## Fluid layout

        A fluid layout allows the width of the content to match the width of the viewport

      iframe.animation(scrolling="no" src="/iframes/layout-fluid/fluid.html")

      :markdown
        For a fluid wrapper <span class="if-semantic"> use the mixin
        <code>wrapper($fluid: true)</code></span>

        To have elements break out of a wrapper (called "bleeding"), just
        end the wrapper before the bleed content and open it back up afterwards.

    article.code
      .if-semantic
        :markdown
          <span>

              .wrapper {
                @include wrapper($fluid: true);
              }

      .ifnot-semantic
        :markdown
          <span>

              <div class="wrapper wrapper-fluid">
                ...
              </div>

  .document
    article.article.article-full
      :markdown
        ## Fluid-fixed layout

        This layout is the default behavior for a wrapper in Kickstart and
        combines the best of both worlds.

        Instead of constantly resizing to the size of the viewport, a new fixed
        width is used at each breakpoint.

      iframe.animation(scrolling="no" src="/iframes/layout-fluid-fixed/fluid-fixed.html")

  .document
    article.article
      :markdown
        Create a wrapper around your content <span class="if-semantic">and use the mixin
        <code>wrapper()</code></span><span class="ifnot-semantic">and
        use the <code>.wrapper</code> class.

    article.code
      .if-semantic
        :markdown
          <span>

              <div class="wrapper">
                <h1>Hello world</h1>
              </div>

              .wrapper{
                @include wrapper();
              }

      .ifnot-semantic
        :markdown
          <span>

              <div class="wrapper">
                <h1>Hello world</h1>
              </div>

  .document
    article.article.article-full
      :markdown
        # HTML styles

        Several styles are applied at the HTML level for convenience throughout
        the DOM.

        A default font-size of 16-18px (varies depending on the theme) is set. This
        should really be the only place where `px` are used to define font-size.
        Elsewhere, the `rem` unit is used, which is relative to the font-size in
        the HTML document.

        On supporting browsers, this font-size will scale with the width of the
        screen. See [Typography](/docs/3.x/ui/typography/) for more information
        on responsive text.

  .document
    article.article.article-full
      :markdown
        # Naming conventions

        Kickstart is not a fan of [BEM](http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/)
        for several reasons that won't be mentioned here.

        However, a miniscule part of the philosophy behind it is used in
        Kickstart naming conventions. As an alternative to distinguishing "Blocks,
        elements, and modifiers" Kickstart simply distinguishes "Components
        and modifiers."

        Also see [Amadeus](/amadeus/) a spec sheet we created for advanced CSS selectors

  .document
    article.article
      :markdown
        ## Components

        Components can be HTML elements that are standalone--they cannot or
        typically do not have other components nested within them.

    article.code
      :markdown
        <span>

            <button class="button">Send</button>

  .document
    article.article
      :markdown 
        Other components can have elements nested within them, but no
        distinction is made in the naming convention.

    article.code
      :markdown
        <span>

            <div class="navbar">
              <ul>
                <li>
                  <a href="#">Home</a>
                </li>
                <li>
                  <a class="button" href="#">Home</a>
                </li>
              </ul>
            </div>
  .document
    article.article
      :markdown
        Component names try to remain simple, however sometimes a space
        character is needed. The underscore (_) character is reserved for this.

    article.code
      :markdown
        <span>

            <div class="tooltip_trigger">
              <span class="tooltip"></span>
            </div>

  .document
    article.article
      :markdown
        ## Modifiers

        Elements with alternate states and schemes have **modifiers**

        For example, here is a default button and a yellow button

    article.code
      :markdown
        <span>

            <button class="button">...</button>
            <button class="button button-yellow">...</button>

  .document
    article.article
      :markdown
        Why the repetition? Why not just `.button .yellow`? This is to
        specify that yellow is a modifier on the button.

        You may want to define your button as a non-kickstart component
        "foo" as well

    article.code
      :markdown
        <span>

            <button class="button foo button-yellow">...</button>

  .document
    article.article
      :markdown
        Maybe foo is a component that styles the outline of the button,
        which we want to be blue.

        With this convention, it's clear where the modifier should be
        applied.

    article.code
      :markdown
        <span>

            <button class="button foo button-yellow foo-blue">...</button>

  .if-semantic
    .document
      article.article
        .if-semantic
          h3.only-semantic Using decoupled modifiers
          :markdown
            One of the problems you may run into when using the mixins across
            multiple classes, is getting individual properties to stay separate.

            Consider the following css:

      article.code
        :markdown
          <span>

              .button { 
                @include button(); 
              }
              .button.button-blue {
                @include button($background-color: map-get($colors, blue));
              }
              .button.button-large {
                @include button($size: 1.3);
              }

  .document
    article.article
      :markdown
        If I create a big, blue button, this button will probably not show up blue. Why? Look at the third 
        rule in the css, by including `button()` we also included the default
        styling for a button, which is not blue.

    article.code
      :markdown
        <span>

            <button class="button button-blue button-large">Send</button>

  .if-semantic
    .document
      article.article
        :markdown
          For this reason, most mixins include decoupled sub-mixins to target
          individual properties.

      article.code
        :markdown
          <span>

              .button { 
                @include button; 
              }
              .button.button-blue {
                @include button-color(map-get($colors, blue));
              }
              .button.button-large {
                @include button-size(1.3)
              }

  .document
    article.article.article-full
      :markdown
        In the above examples, `button-size()` and `button-color` are the exact
        same mixins called from `button()`. They are simply written outside of
        the mixin for this exact purpose.

  .if-semantic
    .document
      article.article
        h1.only-semantic Colors
        h2.only-semantic Rainbow colors

        :markdown
          To use a color variable, refer to the `$color` Sass map and retrieve one of red, orange, yellow, green, blue, or violet.

          [Read more about Sass maps](http://sass-lang.com/documentation/file.SASS_REFERENCE.html#maps)

      article.code
        :markdown
          <span>

              .button
                color: map-get($colors, red)

    .document
      article.article
        :markdown
          <h2 class="only-semantic">Grayscale</h2>

          Grayscale variables live in three separate maps, `$white`, `$gray`, and `$black`.
          Shades of each are called using `-`, `-er`, and `-est` patterns as such:

      article.code
        :markdown
          <span>

              map-get($white, darker)

    .document
      article.article
        :markdown
          For the $gray map, you can retrieve the light, lighter, and lightest light subsets or the
          dark, darker, and darkest dark subsets.

      article.code
        :markdown
          <span>

              map-get($gray, lightest)
              map-get($gray, lighter)
              map-get($gray, light)
              map-get($gray, dark)
              map-get($gray, darker)
              map-get($gray, darkest)

    .document
      article.article
        :markdown
          The same is true for `$white` and `$black`. Intuitively, "light" versions of `$white` do
          not exist, nor do "dark" versions of `$black`

      article.code
        :markdown
          <span>

              map-get($white, dark)
              map-get($white, darker)
              map-get($white, darkest)

              map-get($gray, lightest)
              map-get($gray, lighter)
              map-get($gray, light)
              map-get($gray, dark)
              map-get($gray, darker)
              map-get($gray, darkest)

              map-get($black, lightest)
              map-get($black, lighter)
              map-get($black, light)

    .document
      article.article
        :markdown
          For regular white, gray, and black, simply use the css name.

          This example represents a grayscale set all the way from white to black.

      article.code
        :markdown
          <span>

              white

              map-get($white, dark)
              map-get($white, darker)
              map-get($white, darkest)

              map-get($gray, lightest)
              map-get($gray, lighter)
              map-get($gray, light)

              gray

              map-get($gray, dark)
              map-get($gray, darker)
              map-get($gray, darkest)

              map-get($black, lightest)
              map-get($black, lighter)
              map-get($black, light)

              black 

    .document
      article.article.article-full
        :markdown
          <h2 class="only-semantic">Semantic colors</h2>

          Two semantic colors, `$primary-color` and `$secondary-color` are assigned to the colors/grayscale 
          values above via the chosen theme. These are used throughout Kickstart to denote hierarchy in the
          interface.

  include ../_includes/layout/_blocks_and_components.jade
