.document
  article.article
    h1 Jekyll

    p
      span.notice Not yet compatible with GitHub Pages
      |  Unfortunately, GitHub runs Jekyll in safe mode which prevents it from loading
      | the custom `load_paths` needed by Kickstart. Hopefully this will change soon.

    h2 Add Kickstart submodule

    :markdown
      To add Kickstart to Jeykll 2, you'll of course need to start a new Jekyll project
      following the instructions on the [Jekyll Docs](http://jekyll.rb)

      Afterwards, `cd` into the root of your Jekyll project and add Kickstart as a submodule.

  article.code
    :markdown
      <span>

          $(myjekyllproject) git init # If you haven't already made your jekyll project a git repo

          $(myjekyllproject) git submodule add https://github.com/adamjgrant/kickstart.git _kickstart

.document
  article.article
    :markdown
      ## Edit load paths

      You should now have a directory called _kickstart at the root of your project.

      Now, open _config.yml and add the following to the bottom:

  article.code
    :markdown
      <span>

          gems:
            - "autoprefixer-rails"
            - "jekyll-assets"

          sass:
            load_paths:
              - "_sass"
              - "_kickstart"
              - "_kickstart/lib-core/sass"

          assets:
            sources:
              - "_assets/javascripts"
              - "_assets/stylesheets"
              - "_sass"
              - "_kickstart"
              - "_kickstart/lib-core/sass"

.document
  article.article
    :markdown
      ## Import Kickstart

      Open css/main.scss and add this just below the `@charset "utf-8";` line:

      You can now add any Kickstart CSS you want to files imported from css/main.scss

      If you're feeling daring, wipe out main.scss completely except for that `@import` line you added.
      You'll be running pure Kickstart, but will have to redesign your site a bit.
    
  article.code
    :markdown
      <span>

          @import "lib/sass/themes/default/theme.sass";

.document
  article.article.article-full
    :markdown
      <span class="notice">Don't edit the submodule</span> Any edits you make to the submodule, 
      (i.e. the _kickstart directory you just created) can vanish without being retrievable
      in Git. 

      To avoid this, simply write your own CSS in the _sass directory. If you're editing a theme,
      you can simply copy the theme into _sass and import it from there. If you're creating
      a new theme, just copy the default theme from lib-core.

.document
  article.article
    :markdown
      ## Add autoprefixer
      You should also install autoprefixer so Kickstart works across modern browsers. To do this,
      simply add the following to your gemfile

  article.code
    :markdown
      <span>
      
          source "http://rubygems.org"

          gem "jekyll-assets"
          gem "autoprefixer-rails"
          gem "therubyracer", platforms: :ruby

.document
  article.article
    :markdown
      ## Create an asset pipeline

      To use Jekyll Assets, we'll need to edit the directory structure a bit. If you use Rails, this will
      be very familiar.

      In the root of your Jekyll project, add an `_assets` directory with two children, `stylesheets`
      and `javascripts`.

  article.code
    :markdown
      <span>

          _assets
            stylesheets
            javascripts
          _includes
          _layouts
          _sass
          ...

.document
  article.article
    :markdown
      In `_assets/stylesheets`, move in your main.scss file, renamed as main.css.scss

      Also, remove any frontmatter (The ---s) from the file.

  article.code
    :markdown
      <span>

          _assets
            stylesheets
            javascripts
          _includes
          _layouts
          _sass
          ...
          

.document
  article.article
    :markdown
      ## Reference your assets in the markup

      Now we need to reference the post-processed CSS files that will be created.
      Open `_includes/head.html` and replace the `link` to main.css as follows.

  article.code
    :markdown
      <span>

          <!-- Change this -->
          <link rel="stylesheet" href="{{ "/css/main.css" | prepend: site.baseurl }}">

          <!-- To this -->
          {% stylesheet main.css %}

