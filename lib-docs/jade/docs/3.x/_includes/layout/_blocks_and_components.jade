.document
  article.article
    :markdown
      # Amadeus shortcuts

      Kickstart natively supports [Amadeus](/amadeus/) selector conventions for keeping 
      selectors modular.

      Here's an example of how that might look.

      Notice we're using the `+` shortcut instead of `@include` here.
      This is optional and only available in Sass, not Scss. However,
      @include will work just fine as well.

      If you're using the gulp framework, you'll be able to use the jade mixins as well.
      If not, you can still use the Sass mixins.

  article.code
    :markdown
      <span>
         
          // Jade (Included with the optional gulp framework)

          +page("store", "show")
            +b("products")
              h1 These are our products

              +c("product", "featured") Product 1
              +c("product") Product 2
              +c("product") Product 3
              +c("product") Product 4

          // Sass

          +page("store", "show")
            background: #EEEEEE

            +b("products")
              padding: $space

            +c("product")
              padding: $space/2
              font-size: 2rem

            +c("product", "featured")
              color: map-get($colors, green)

.document
  article.article
    :markdown
      And here's how that would output.

  article.code
    :markdown
      <span>

          <div data-controller="store" data-action="show">
            <div data-block="products">
              <div data-component="product" data-variant="featured">Product 1</div>
              <div data-component="product">Product 2</div>
              <div data-component="product">Product 3</div>
              <div data-component="product">Product 4</div>
            </div>
          </div>

    :markdown
      <span>

          // Let's look at the output as SCSS for brevity.

          [data-controller="store"][data-action="show"] {
            background: #EEEEEE;

            [data-block="products"] {
              padding: $space;
            }

            [data-component="product"] {
              padding: $space/2;
              font-size: 2rem;
            }

            [data-component="product" data-variant="featured"] {
              color: map-get($colors, green);
            }
          }

.document
  article.article
    :markdown
      ## Pages

      The `page()` mixin takes either or both a controller and/or action in that order.

  article.code
    :markdown
      <span>

          // Jade

          +page("products", "show")
          +page("products")
          +page(null, "show")
          
          // Sass

          +page("products", "show")
            display: block

          +page("products")
            display: block

          +page(null, "show")
            display: block

.document
  article.article
    :markdown
      And here is the output

  article.code
    :markdown
      <span>

          <div data-controller="products" data-action="show"></div>
          <div data-controller="products" data-action=""></div>
          <div data-controller="" data-action="show"></div>

    :markdown
      <span>

          [data-controller="products][data-action="show"] { display: block; }
          [data-controller="products] { display: block; }
          [data-action="show"] { display: block; }

.document
  article.article
    :markdown
      ## Blocks and Components

      Blocks define large areas of an app that are in between a page and
      a component in significance and size. Typically, a block shouldn't
      exist unless there are components inside of it.

  article.code
    :markdown
      <span>

          // Jade

          +b("products")
            +c("product") Product 1
            +c("product") Product 2
            +c("product") Product 3

          // Sass

          +b("products")
            padding: $space

            +c("product")
              padding: $space/2

.document
  article.article
    :markdown
      Here is the output

  article.code
    :markdown
      <span>

          <div data-block="products">
            <div data-component="product">Product 1</div>
            <div data-component="product">Product 2</div>
            <div data-component="product">Product 3</div>
          </div>

    :markdown
      <span>

          [data-block="products"] { padding: $space; }
          [data-component="product"] { padding: $space/2; }

.document
  article.article
    :markdown
      ### Variants

      You can also add a variant attribute by passing in a second
      param

  article.code
    :markdown
      <span>

          // Jade

          +b("products")
            +c("product") Product 1
            +c("product", "featured") Product 2
            +c("product") Product 3

          // Sass

          +b("products")
            padding: $space

            +c("product")
              padding: $space/2

            +c("product", "featured")
              color: map-get($colors, green)

.document
  article.article
    :markdown
      Here is the output:

  article.code
    :markdown
      <span>

          <div data-block="products">
            <div data-component="product">Product 1</div>
            <div data-component="product" data-variant="featured">Product 2</div>
            <div data-component="product">Product 3</div>
          </div>

    :markdown
      <span>

          [data-block="products"] { padding: $space; }
          [data-component="product"] { padding: $space/2; }
          [data-component="product"][data-variant="featured"] { color: map-get($colros, green); }

