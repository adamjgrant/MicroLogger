.document
  article.article
    h1#responsive Responsive
    p Remember that using shortcut classes will automatically make your grid responsive. See "shortcuts" above.

    .ifnot-semantic
      :markdown
        Setting column rules via classes requires just a bit more syntax.

        It is best practice to set the styles you expect on your smallest device
        first. This is what is known as designing "[Mobile First](http://bradfrostweb.com/blog/mobile/the-many-faces-of-mobile-first/)"

        For this, we'll use a regular grid class.

  article.code
    .ifnot-semantic
      :markdown
        <span>

            <div class="row">
              <section class="col-third">
                <p>Sidebar</p>
              </section>

              <section class="col-twothirds">
                <p>Main pane</p>
              </section>
            </div>

            <div class="row">
              <section class="col-12">
                <h1>About me</h1>
                <p>...</p>
              </section>
              <section class="col-12">
                <h1>My work</h1>
                <p>...</p>
              </section>
              <section class="col-12">
                <h1>Get in touch</h1>
                <p>...</p>
              </section>
            </div>

.ifnot-semantic
  .document
    article.article
      :markdown
        In this example, we want these three sections to stack on top of one
        another. However, on tablet, it would be nice to have the first two in two
        columns. We can use the following syntax to create a mobile rule: 

        `size` is the viewport size and `columns` is a number 1-12.

        Here are the sizes available with their corresponding widths:

      table
        thead
          tr
            th Size name
            th Actual width
        tbody
          - for breakpoint in [{name: 'xs', size: '360px'}, {name: 'sm', size: '480px'}, {name: 'rg', size: '768px'}, {name: 'md', size: '1024px'}, {name: 'lg', size: '1200px'}, {name: 'xl', size: '1400px' }]
            tr
              td
                code #{breakpoint.name}
              td #{breakpoint.size}

    article.code
      :markdown
        <span>

            .col-[size]-[columns]

.ifnot-semantic
  .document
    article.article
      :markdown
        Now let's add a rule.

        As you can see, we did not need to add a class to the last `section` because
        we want that to stay full width, at least for this breakpoint.

    article.code
      :markdown
        <span>

            <div class="row">
              <section class="col-12 col-md-6">
                <h1>About me</h1>
                <p>...</p>
              </section>
              <section class="col-12 col-md-6">
                <h1>My work</h1>
                <p>...</p>
              </section>
              <section class="col-12">
                <h1>Get in touch</h1>
                <p>...</p>
              </section>
            </div>

.ifnot-semantic
  .document
    article.article
      :markdown
        On desktop, we have enough room to split these up a little more. Let's make
        each one of them a third of the total width.

    article.code
      :markdown
        <span>

            <div class="row">
              <section class="col-12 col-md-6 col-lg-4">
                <h1>About me</h1>
                <p>...</p>
              </section>
              <section class="col-12 col-md-6 col-lg-4">
                <h1>My work</h1>
                <p>...</p>
              </section>
              <section class="col-12 col-lg-4">
                <h1>Get in touch</h1>
                <p>...</p>
              </section>
            </div>

.ifnot-semantic
  .document
    article.article
      h2#lefts

      :markdown
        For mobile lefts, we use the form:


    article.code
      :markdown
        <span>

            .col-left-[size]-[columns]

  .document
    article.article
      :markdown
        If we wanted our "Get in touch" section above to half-sized and left by
        half on a medium-sized display, we could add this:

        The left will automatically remove itself if a `col-lg` column definition
        is declared.  

    article.code
      :markdown
        <span>

            <section class="col-12 col-md-6 col-left-md-6 col-lg-4">
              <h1>Get in touch</h1>
              <p>...</p>
            </section>

.if-semantic
  .document
    article.article.article-full
      :markdown
        Mix your grid rules into media queries to make your own responsive rules.

        It helps to use the breakpoints provided. Each returns a fixed width based
        on a common device.

      table
        thead
          tr
            th Variable
            th Actual width
        tbody
          - for breakpoint in [{name: '$phone', size: '360px'}, {name: '$phablet', size: '480px'}, {name: '$tablet', size: '768px'}, {name: '$tablet-landscape', size: '1024px'}, {name: '$large-monitor', size: '1200px'}, {name: '$xl-monitor', size: '1400px' }, {name: '$xxl-monitor', size: '1600px'}]
            tr
              td
                code #{breakpoint.name}
              td #{breakpoint.size}

      :markdown 
        When using media queries, it's best practice to write your styles for the
        smallest device first, and write the exceptions as you go up. This is
        commonly referred to as
        [Mobile First](http://bradfrostweb.com/blog/mobile/the-many-faces-of-mobile-first/)
        design.

.document
  article.article
    :markdown
      ## Media Query Shortcuts

      To make writing mobile-first media queries easy, we've included the `gt` (greater than) mixin.

  article.code
    :markdown
      <span>

          .something {
            width: 100%;

            gt($phone) {
              width: 50%;
            }
          }

          // Is the same as

          .something {
            width: 100%;

            @media screen and (min-width: 360px) {
              width: 50%;
            }
          }
