extends ../../../_layout

block hero-title
  h1 Grid

block variables
  - var showFooter = false
  - var title = "Grid"

block subMenuVars
  - var subMenuItem = "getstarted"

block ui-stylesheet
  link(rel="stylesheet" href="/css/pages/docs/grid.css")

block documents
  .document
    article.article
      :markdown

        The grid includes two components

        1. A row
        1. Columns

        Resize your browser window to observe the column behavior

      .example
        .row
          .col-third
            .col-example
              h5.toc-exempt News
              p Breaking news

          .col-twothirds
            .col-example
              h1.toc-exempt Top Story
              p Here are today's top stories

    article.code
      .ifnot-semantic
        :markdown
          <span>

              <section class="row">
                <aside class="col-third">
                  <p>Sidebar</p>
                </aside>
                <main class="col-twothirds">
                  <p>Main Pane</p>
                </main>
              </section>

      .if-semantic
        :markdown
          <span>

              <section class="application">
                <aside class="sidebar">
                  <p>Sidebar</p>
                </aside>
                <main class="mainpane">
                  <p>Main Pane</p>
                </main>
              </section>

        :markdown
          <span>

              .application {
                @include row();
              }
              .sidebar {
                @include column('third');
              }
              .mainpane {
                @include column('twothirds');
              }

  .document
    article.article
      :markdown

        The **wrapper** is optional. This creates a fixed width wrapper for the
        grid elements. The fixed width automatically resizes based on screen width.

        For more about wrappers, see the example on fixed, fluid, and fixed fluid
        layouts in [Layout and CSS](/docs/#{docsVersion}/ui/)

        The **row** is a container for column elements.

        The **column** is a measured container that occupies up to 12 column widths.

    article.code
      .ifnot-semantic
        :markdown
          <span>

              <div class="wrapper">
                ...
              </div>

      .if-semantic
        :markdown
          <span>

              <div class="wrapper">
                ...
              </div>

              .wrapper {
                @include wrapper();
              }

  .document
    article.article
      :markdown
        # Use Shortcuts

        Columns can be expressed by a number or one of three English words
        These are passed into the `column()` mixin.

        These are not just for convenience, they automatically set breakpoints to
        change column widths on various screen sizes.

    article.code
      .if-semantic
        :markdown
          <span>

              @include column('third');
              @include column('twothirds');
              @include column('half');

      .ifnot-semantic
        :markdown
          <span>

              .col-third
              .col-twothirds
              .col-half

  .document
    article.article
      :markdown
        # Use numbers

        Passing in numbers, choose a column width from 1-12:

    article.code
      .if-semantic
        :markdown
          <span>

              .newsfeed {
                @include column(2);
              }
              .article {
                @include column(10);
              }

      .ifnot-semantic
        :markdown
          <span>

              <div class="newsfeed col-2">
                ...
              </div>
              <div class="article col-10">
                ...
              </div>

  .document
    article.article.article-full
      h1 More examples
      .example
        .row
          .col-3: .col-example 3 columns
          .col-3: .col-example 3 columns
          .col-3: .col-example 3 columns
          .col-3: .col-example 3 columns

        .row
          .col-3: .col-example 3 columns
          .col-6: .col-example 6 columns
          .col-3: .col-example 3 columns

        .row
          .col-6: .col-example 6 columns
          .col-6: .col-example 6 columns

        .row
          .col-3: .col-example 3 columns
          .col-9: .col-example 9 columns

        .row
          .col-3: .col-example 3 columns
          .col-3.col-left-6: .col-example 3 columns, 6 column left

        .row
          .col-6: .col-example 6 columns

        .row
          .col-6: .col-example 6 columns

        .row
          .col-9.col-left-3: .col-example 9 columns, 3 column left

        .row
          .col-4: .col-example 4 columns
          .col-4: .col-example 4 columns
          .col-4: .col-example 4 columns

        .row
          .col-4.col-left-4: .col-example 4 columns, 4 column left

        .row
          .col-4: .col-example 4 columns

        .row
          .col-4.col-left-4: .col-example 4 columns, 4 column left

        .row
          .col-6: .col-example 6 columns
          .col-6: .col-example 6 columns
          .col-6: .col-example 6 columns
          .col-6: .col-example 6 columns

        .row
          .col-12: .col-example 12 columns

  .document
    article.article
      h1 Offsets
      p Offsets allow you to add column-measured space to the side of a column.

      .example
        .row
          .col-left-6.col-6: .col-example six columns with six column left

    article.code
      .ifnot-semantic
        :markdown
          <span>

              ...
              <div class="col-left-6 col-6">
                Six columns
              </div>

      .if-semantic
        :markdown
          <span>

              ...
              <div class="reminder">
                Six columns
              </div>

              .reminder {
                @include column(6, 6);
              }

  .document
    article.article.article-full
      .example
        .row
          .col-left-2.col-10: .col-example 10 columns with 2 column left
        .row
          .col-3: .col-example 3 columns
          .col-6.col-left-3: .col-example 6 columns with 3 column left
        .row
          .col-left-4.col-4: .col-example 4 columns with 4 column left

  .document
    article.article
      h2 Shortcuts
      p Offsets can also use semantic shortcuts.

      .example
        .row
          .col-third.col-left-twothirds: .col-example One third with two-third left

      p In the above example, the column and the left will revert to 1/2 width on tablet. On mobile, the left offset will disappear and the column will be full-width.

    article.code
      .ifnot-semantic
        :markdown
          <span>

              <div class="col-third col-left-twothirds">
                ...
              </div>

      .if-semantic
        :markdown
          <span>

              <div class="blurb">
                ...
              </div>

              .blurb {
                @include column('third', $left: 'twothirds');
              }

  .document
    article.article
      h1 Nesting

      .example
        .row
          .col-6
            .col-example
              | half
              .row
                .col-6: .col-example.gray half
                .col-6: .col-example.gray half
          .col-6
            .col-example
              | half
              .row
                .col-4: .col-example.gray third
                .col-4: .col-example.gray third
                .col-4: .col-example.gray third

      p When nesting, be sure to include a new row in the parent column.

    article.code
      .if-semantic
        :markdown
          <span>

              <div class="row">
                <div class="sidebar">
                  half
                  <div class="options">
                    <div class="terms">
                      half
                    </div>
                    <div class="definitions">
                      half
                    </div>
                  </div>
                </div>
                <div class="main">
                  <div class="menu">
                    <div class="new">third</div>
                    <div class="updated">third</div>
                    <div class="archived">third</div>
                  </div>
                </div>
              </div>

              .row, .menu, .options {
                @import row();
              }
              .sidebar, .main, .terms, .definitions {
                @import column(6);
              }
              .new, .updated, .archived {
                @import column(4);
              }

      .ifnot-semantic
        :markdown
          <span>

              <div class="row">
                <div class="col-6">
                  half
                  <div class="row">
                    <div class="col-6">
                      half
                    </div>
                    <div class="col-6">
                      half
                    </div>
                  </div>
                </div>
                <div class="col-6">
                  <div class="row">
                    <div class="col-4">third</div>
                    <div class="col-4">third</div>
                    <div class="col-4">third</div>
                  </div>
                </div>
              </div>

  include ../../../../3.x/_includes/grid/_responsive.jade

  .document
    article.article
      :markdown
        Here's how we might make some different column rules using
        these breakpoints:

    article.code
      :markdown
        <span>

            <div class="about-me">
              ...
            </div>
            <div class="my-work">
              ...
            </div>
            <div class="getting-in-touch">
              ...
            </div>

  .document
    article.article
      :markdown
        We want each of the above sections to occupy a third of the page on
        desktop.

        Oh wait, we're designing this mobile first. Let's start with the phone.
        Three columns would be a little crowded, so let's just stack one on top of
        the other.

    article.code
      :markdown
        <span>

            .about-me, .my-work, .getting-in-touch {
              @include column(12);
            }

  .document
    article.article
      :markdown
        This looks good, but on a tablet in landscape position, the reading stride
        is a little wide. Let's split up the first two columns and leave the last
        one full.

    article.code
      :markdown
        <span>

            .about-me, .my-work, .getting-in-touch {
              @include column(12);
            }
            @media screen and (min-width: $tablet-landscape) {
              .about-me, .my-work {
                @include column(6);
              }
            }

  .document
    article.article
      :markdown
        Notice, we don't have to write anything for `.getting-in-touch` because
        we inherit its full-width from the phone's rule.

        Now we're on desktop and we're ready to go into three column mode.

        That should be all we need for a responsive grid.

    article.code
      :markdown
        <span>

            .about-me, .my-work, .getting-in-touch {
              @include column(12);
            }
            @media screen and (min-width: $tablet-landscape) {
              .about-me, .my-work {
                @include column(6);
              }
            }
            @media screen and (min-width: $desktop) {
              .about-me, .my-work, .getting-in-touch {
                @include column(4);
              }
            }
