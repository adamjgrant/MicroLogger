extends ../../../_layout

block hero-title
  h1 Navigation

block variables
  - var showFooter = false
  - var title = "Navigation"

block ui-stylesheet
  link(rel="stylesheet" href="/css/pages/docs/ui/navigation.min.css")

block documents
  .document
    article.article
      :markdown
        # Bars

        Navigation items have been meticulously designed to be very straightforward,
        semantic, and dependent on sensible defaults.

      .example
        .navbar
          nav
            ul
              li: a(href="#") Home
              li: a(href="#") Blog
            ul
              li: a(href="#") Login

      :markdown
        Navigation bars consist of three elements:

        1. The container (Your choice of element)
        1. The menu (`nav`)
        1. The menu items (`ul li` structure)

        Why not just have `<nav>` without the extra div above? This is to give you
        more separation between the flexbox elements and the container it sits in.
        Flexbox display settings will affect the direct descendants. The need for
        this separation becomes clearer as the navbar becomes more complex, such
        as the addition of a wrapper inside the container.


    article.code
      :markdown
        <span>

            <div class="navbar">
              <nav>
                <ul>
                  <li>
                    <a href="#">Home</a>
                  </li>
                  <li>
                    <a href="#">Blog</a>
                  </li>
                </ul>
                <ul>
                  <li>
                    <a href="#">Login</a>
                  </li>
                </ul>
              </nav>
            </div>

      .if-semantic
        :markdown
          <span>

              .navbar {
                @include navbar();
              }

  .document
    article.article
      h2 Primary and secondary menus

      :markdown
        The first `ul` is automatically left aligned. Adding another will treat the
        second as a secondary menu and align it right. Adding more than two `ul`s
        will simply continue to follow CSS flexbox rules.

      .navbar
        nav
          ul
            li
              a(href="#") Left

      .navbar
        nav
          ul
            li
              a(href="#") Left
          ul
            li
              a(href="#") Right

    article.code
      :markdown
        <span>

            <div class="navbar">
              <nav>
                <ul>
                  <li>
                    <a href="#">Left</a>
                  </li>
                </ul>
              </nav>
            </div>

            <div class="navbar">
              <nav>
                <ul>
                  <li>
                    <a href="#">Left</a>
                  </li>
                </ul>
                <ul>
                  <li>
                    <a href="#">Right</a>
                  </li>
                </ul>
              </nav>
            </div>

  .document
    article.article
      :markdown
        ## Active states

        Active states are great for showing where in the navigation the user currently resides.
        Simply add the `active` class to the `<a>` for menu links, or `<li>` for dropdowns.

      .navbar(data-ks-navbar)
        nav
          ul
            li: a(href="#") Home
            li: a.active(href="#") Blog
            li
              | Archives
              ul
                li: a(href="#") This year
                li: a(href="#") Last year
                li: a(href="#") Previous years

      .navbar(data-ks-navbar)
        nav
          ul
            li: a(href="#") Home
            li: a(href="#") Blog
            li.active
              | Archives
              ul
                li: a(href="#") This year
                li: a(href="#") Last year
                li: a(href="#") Previous years

    article.code
      :markdown
        <span>

            <div class="navbar">
              <nav>
                <ul>
                  <li>
                    <a href="#">Home</a>
                  </li>
                  <li>
                    <a class="active" href="#">Blog</a>
                  </li>
                  <li>
                    Archives
                    <ul>
                      ...
                    </ul>
                  </li>
                </ul>
              </nav>
            </div>

            <div class="navbar">
              <nav>
                <ul>
                  <li>
                    <a href="#">Home</a>
                  </li>
                  <li>
                    <a href="#">Blog</a>
                  </li>
                  <li class="active">
                    Archives
                    <ul>
                      ...
                    </ul>
                  </li>
                </ul>
              </nav>
            </div>


  .document
    article.article
      :markdown
        ## Layout Styles

        Navbars can have either default, fluid, or fluid-fixed layouts.

        ### No style

        By default, navbars have a layout parameter of "none" This is best for navigation bars
        that are in the page itself, and not integrated into the master layout of the page.

        ![Navbar with layout of "none" (Default)](/img/nav_none.png)

    article.code
      .if-semantic
        :markdown
          <span>

              @include navbar();

      .ifnot-semantic
        :markdown
          <span>

              <div class="navbar">
                ...
              </div>

  .document
    article.article
      :markdown
        ### Fluid

        You may want your navbar contents to be full width, but keep a healthy
        margin on the left and right. This is especially important on smaller
        screens.

        ![Navbar with layout of "fluid" (Default)](/img/nav_fluid.png)

      .ifnot-semantic
        :markdown
          Simply use the `.fluid` helper class to enable wrapping fluidly.

      .if-semantic
        :markdown
          Simply pass in `'fluid'` to the `$layout` parameter to enable a fluid wrapper.

    article.code
      .ifnot-semantic
        :markdown
          <span>

              <div class="navbar navbar-fluid">
                ...
              </div>

      .if-semantic
        :markdown
          <span>

              @include navbar($layout: 'fluid');

  .document
    article.article
      :markdown
        ### Fluid-Fixed

        Fluid fixed layouts allow your navbar's container to be as wide as you want, but
        still keep the contents in the same container as any other element using `wrapper()`.

        The underlying logic for this is more tricky than it appears, as the navbar will
        adjust itself in a way that the first and last menu items align, not by their edges,
        but the edges of the text inside them.

        ![Navbar with layout of "fluid-fixed" (Default)](/img/nav_fluid-fixed.png)

      .if-semantic
        :markdown
          For a fluid-fixed layout, pass in `'fluid-fixed'` to the `$layout` parameter.

      .ifnot-semantic
        :markdown
          For a fluid fixed layout, use the `.navbar-fluid_fixed` class.

    article.code
      .if-semantic
        :markdown
          <span>

              @include navbar($layout: 'fluid-fixed');

      .ifnot-semantic
        :markdown
          <span>

              <div class="navbar navbar-fluid_fixed">
                ...
              </div>

  include ../../../../3.x/_includes/navigation/_dropdowns.jade

  .document
    article.article
      :markdown
        ## Coloring navbar

      .navbar.navbar-blue
        nav
          ul
            li: a(href="#") Home
            li: a(href="#") Blog

      :markdown
        Coloring the navbar just means changing the color of the container. However,
        darker colors might mean using lighter colors for the text for better contrast.

        For this, pass in a color to the `$background` parameter of `navbar()`

        `navbar()` will try to guess if the color is dark enough to warrant
        lighter text and automatically switch to white if so.

    article.code
      .if-semantic
        :markdown
          <span>

              @include navbar($background: #333)

      .ifnot-semantic
        :markdown
          For a darker navbar with lighter text, use `.navbar-dark`

              <div class="navbar-dark">
                <nav>
                  ...
                <nav>
              </div>

  include ../../../../3.x/_includes/navigation/_responsive.jade

  .document
    article.article
      :markdown
        ## Fixed navbar

      .if-semantic
        :markdown
          To create a fixed navbar, pass in `true` to the `$fixed` parameter of `navbar()`.

      .ifnot-semantic
        :markdown
          To create a fixed navbar, use the `.navbar-fixed` class.

      :markdown
        By default, this sticks the navbar to the left and right
        Be sure to specify these in your CSS if needed, especially if using stacked navbars.

        You'll also need to decide on the padding you'll need on the underlying page.
        Positioning the navbar to `fixed` will cause the content to start underneath it. Consider
        adding a `margin-top` that is equal to the height of the navbar.

        Keep in mind, the navbar's height changes just slightly, due to the responsive text
        inside of it, so it's best to test this value on mobile.

    article.code
      :markdown
        <span>

            <div class="navbar navbar-fixed">
              <nav>
                <ul>
                  ...
                </ul>
              </nav>
            </div>

      :markdown
        <span>

            .page {
              margin-top: 45px;
            }


      .if-semantic
        :markdown
          <span>

              .navbar.navbar-fixed {
                @include navbar($fixed: true);
              }

  .if-semantic
    .document
      article.article
        :markdown
          To apply a fixed navbar one-off, use the `navbar-fixed` mixin.

      article.code
        :markdown
          <span>

              .navbar1, .navbar2 {
                @include navbar();
              }

              .navbar1 {
                @include navbar-fixed();
              }

  .document
    article.article
      :markdown
        #### Stacking navbars

        For best performance with spacing and z-indexes, I highly recommend instead using a single div
        to contain your two *non-fixed* navbars.

    article.code
      :markdown
        <span>

            <div class="navbars">
              <div class="navbar navbar-1">...</div>
              <div class="navbar navbar-2">...</div>
            </div>

            .navbars {
              position: fixed;
              z-index: 1000;
              top: 0;
              left: 0;
              right: 0;
            }

  .document
    article.article
      :markdown
        # Pagination

        Pagination styling is very similar to the navigation bar. As such, the
        markup is also very similar and
        <span class="ifnot-semantic">a <code>.pagination-dark</code> class is available.</span>
        <span class="if-semantic">a <code>$background-color</code> can be passed in to <code>pagination()</code></span>.

      .example
        .pagination
          ul
            li: a(href="#") &laquo; Prev
          ul
            li: a(href="#") Next &raquo;

    article.code
      :markdown
        <span>

            <div class="pagination">
              <ul>
                <li>
                  <a href="#">&laquo; Prev</a>
                </li>
                <li>
                  <a href="#">Next &raquo;</a>
                </li>
              </ul>
            </div>

            <!-- laquo/raquo stand for "left and right angle quotes" -->

      .if-semantic
        :markdown
          <span>

              .pagination {
                @include pagination();
              }

  .document
    article.article
      h2 Showing pages
      p Multiple items in a <code>ul</code> will group much like a button group.

      .example
        .pagination
          ul
            li: a(href="#") 1
            li: a(href="#") 2
            li: a(href="#") 3
            li: a(href="#") 4
            li: a(href="#") 5

    article.code
      :markdown
        <span>

            <div class="pagination">
              <ul>
                <li>
                  <a href="#">1</a>
                </li>
                <li>
                  <a href="#">2</a>
                </li>
                <li>
                  <a href="#">3</a>
                </li>
                <li>
                  <a href="#">4</a>
                </li>
                <li>
                  <a href="#">5</a>
                </li>
              </ul>
            </div>

  .document
    article.article
      h2 Multiple controls

      .example
        .pagination
          ul
            li: a(href="#") &laquo; Prev

          ul
            li: a(href="#") 1
            li: a(href="#") 2
            li: a(href="#") 3
            li: a(href="#") 4
            li: a(href="#") 5

          ul
            li: a(href="#") Next &raquo;

    article.code
      :markdown
        <span>

            <div class="pagination">
              <ul>
                <li>
                  <a href="#">&laquo; Prev</a>
                </li>
              </ul>

              <ul>
                <li>
                  <a href="#">1</a>
                </li>
                <li>
                  <a href="#">2</a>
                </li>
                <li>
                  <a href="#">3</a>
                </li>
                <li>
                  <a href="#">4</a>
                </li>
                <li>
                  <a href="#">5</a>
                </li>
              </ul>

              <ul>
                <li>
                  <a href="#">Next &raquo;</a>
                </li>
              </ul>
            </div>

  .document
    article.article
      h2 Other options
      p Adding the <code>disabled</code> attribute will signal to the user the option is not available.

      .example
        .pagination
          ul
            li: a(href="#") 1
            li: a(href="#" disabled) 2

    article.code
      :markdown
        <span>

            <div class="pagination">
              <ul>
                <li>
                  <a href="#">1</a>
                </li>
                <li>
                  <a href="#" disabled>2</a>
                </li>
              </ul>
            </div>
