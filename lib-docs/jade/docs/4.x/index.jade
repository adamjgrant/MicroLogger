extends _layout

block hero-title
  h1 Quickstart

block variables
  - var showFooter = false
  - var title = 'Quickstart'

block subMenuVars
  - var subMenuItem = "getstarted"

block documents
  include ../3.x/_includes/quickstart/_quickstart_header.jade
  .document
    article.article
      h1 Barebones
      h2 Head code

      :markdown
        In order to serve your site responsively, and with good SEO practice, I recommend
        adding the following to your `<head>`

        See [this article](http://css-tricks.com/snippets/html/responsive-meta-tag/) for
        more information on building a responsive HTML meta tag.

    article.code
      :markdown
        <span>

            <!DOCTYPE HTML>
            <html>
              <head>
                <meta http-equiv="X-UA-Compatible" content="IE=Edge">
                <meta name="viewport" content="width=device-width, initial-scale=1">
                ...

  .document
    article.article
      h2 JS/CSS

      :markdown
        Just use the CSS/JS file via a CDN.

      p Or download kickstart.css and kickstart.js and include in your html file.

      p
        a.button.button-primary(href="http://cdn.everything.io/kickstart/3.x/css/kickstart.min.css")
          span.fa.fa-cloud-download
          |  kickstart.css
        | &nbsp;
        a.button.button-primary(href="http://cdn.everything.io/kickstart/3.x/js/kickstart.min.js")
          span.fa.fa-cloud-download
          |  kickstart.js
    article.code
      :markdown
        <span>

              ...
                <link rel="stylesheet" href="//cdn.getkickstart.com/css/kickstart.min.css" />
              </head>
              <body>
                ...
                <script type="text/javascript" src="//cdn.getkickstart.com/js/kickstart.min.js"></script>
              </body>

  .document
    article.article
      :markdown
        Make sure any JavaScript code that uses `k$` goes after the script tag
        inclusion of kickstart.js.

        Notice that using this method will obviously not allow for using the
        semantic version of the docs.

    article.code
      :markdown
        <span>

            <script type="text/javascript" src="//cdn.getkickstart.com/js/kickstart.min.js"></script>
            <script>
              k$.tabs('.tabs');
            </script>

  .document
    article.article
      h2 Coffeescript/Sass

      p Using the source Sass and Coffeescript files in a project is easy. Simply clone the repo

    article.code
      :markdown
        <span>

            $(~) git clone git@github.com:adamjgrant/kickstart.git --depth 1

  .document
    article.article.article-full
      :markdown
        In Kickstart, the main Sass file to compile is just the theme you are using. This can be found
        in `lib-core/sass/themes`

        If you wish to use your own theme, you can place this wherever you like in your project. You'll
        just need to make sure your Sass `loadPaths` include the repo you just cloned. Otherwise, you'll
        get an error that some of the core libraries can't be found.

  .document
    article.article
      h1 Rails

      :markdown
        Install the [Kickstart gem](https://rubygems.org/gems/kickstart_rails)

        Rails integration is Sass-only. This means you will
        need to use the mixins instead of things like `.col-6`.

        Some of this is practical, some is philosophical, but if you really need the
        regular css despite the fact you're running a full sass-compilation
        environment, linking to kickstart.css directly is still an option.

        You can either import kickstart into application.css or into individual
        files.

    article.code
      :markdown
        <span>

            gem install "kickstart_rails"

  .document
    article.article
      :markdown
        ## Sample Gemfile

        In your Gemfile, it's important to use Sass 3.4 or above.
        This means you should remove `sass-rails` as it uses an earlier
        version of Sass at the time of this writing.

    article.code
      :markdown
        <span>

            # Do not use sass-rails
            # gem 'sass-rails'

            # Use Sass 3.4 and above.
            gem 'sass', '~> 3.4'

            # Add the kickstart_rails gem
            gem 'kickstart_rails', '~> 3'

            # Add autoprefixer
            gem 'autoprefixer-rails'

  .document
    article.article
      :markdown
        ## Import in application.css

        application.css must first be converted into .scss/.sass and not use any
        `/* require` statements. This is because sprockets does not see the sass
        variables. It will merely concatenate the compiled files together.

        You can change this to use `@import ` statements with an import to
        `kickstart_rails` at the top.
    article.code
      :markdown
        <span>

            @import kickstart_rails;
            @import mysassfile1.sass;
            @import mysassfile2.sass;

  .document
    article.article
      :markdown
        ## JavaScript

        Fortunately, adding the JavaScript is easier. Just add `//= require kickstart_rails` to the top of application.js

    article.code
      :markdown
        <span>

            //= require kickstart_rails
            //= require_tree .

  include ../3.x/_includes/quickstart/_firing_on_ready.jade

  .document
    article.article.article-full
      :markdown
        ## Autoprefixing

        The gem uses autoprefixer to automatically prefix styles. If you want to
        specify your own autoprefixing rule, you'll just need to add a .yml file

        See the instructions
        [at the Autoprefixer docs](https://github.com/ai/autoprefixer-rails)

  .document
    article.article
      h1 Gulp

      :markdown
        My tool of choice for building all of Kickstart is gulp, plus a ton of
        extras. The easiest way to get started with a gulp implementation of
        kickstart is to simply
        [clone the repo](https://github.com/adamjgrant/kickstart).

        Setup instructions are in the README.md file at the repo.

        Once you have your environment up and running, you should empty the jade
        folder and use kickstart-semantic.sass. This was designed specifically as an
        empty file with everything imported in.

        Rename it to whatever you like and link to the resulting .css file in your
        html/jade

    article.code
      :markdown
        <span>

            $(~) git clone git@github.com:adamjgrant/kickstart.git mywebsite --depth 1

            # Install the dependencies
            $(~) cd mywebsite
            $(mywebsite) make setup

            # If all goes well, this should launch your project.
            $(mywebsite) gulp


  include ../3.x/_includes/quickstart/_jekyll.jade

  .document
    article.article
      h1 Node.js

      :markdown
        Kickstart can easily be added as an npm package.
        This will download the entire repo to a `node_modules` folder.

    article.code
      :markdown
        <span>

            npm install --save-dev kickstart-node

  .document
    article.article
      :markdown
        In your sass or scss file, import Kickstart via the theme you prefer:

        Notice you may need a couple `../`s before `node_modules` to point
        to the node_modules directory. This all depends on how you organized your
        project.

        In the example, node_modules is at the same level as the scss/sass
        file.

    article.code
      :markdown
        <span>

            @import node_modules/kickstart-node/lib/sass/themes/default/theme

  .document
    article.article.article-full
      :markdown
        ## Autoprefixer

        The chances are very good that you'll need to include [autoprefixer](https://github.com/postcss/autoprefixer).
        This will add prefixes like `-webkit-` to bleeding edge css properties. Make sure
        this is included as part of your CSS compilation workflow.

        [Also available for Gulp](https://www.npmjs.org/package/gulp-autoprefixer)
